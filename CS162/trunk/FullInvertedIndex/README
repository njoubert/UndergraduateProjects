FULL INVERTED INDEX
MAKER AND SEARCHER

WHO WE ARE
==========

Group 13 of CS162, Spring 2008

Niels Joubert CS162-PC
Nadeem Laiwala CS162-PD
Akhil Dhar CS162-KK
Eugene Li CS162-KI
William Wu CS162-KJ

If things don't seem to work right, please send us all an email at: cs162-13@googlegroups.com

If this gets denied for some reason, please contact us personally at: niels@berkeley.edu

FILES
======

make-index.sh 						- builds the inverted index
search.sh							- queries the index
build_stopwords_from_wordcount.py	- parses wordcount's output into a stopword list
FullInvertedIndex.jar				- the Java hadoop implementation

FILES CREATED IN HADOOP
=======================

output/index/*					- the files containing the full inverted index
output/wordcount/*				- the wordcount results (used to build the stopwords file)
output/stopwords.txt			- the stopwords file
output/result					- the results of a search

USAGE
======

Environmental Variables
	Our scripts assume that Hadoop's environment is correctly set up. That includes the following environmental variables:
		export HDFS=/user/$USER
		export TMPSTORE=/tmp/$USER-storage
		export HADOOP=hadoop-0.16.3
		export PATH=/hadoop/$HADOOP/bin:$PATH

Building index
	Usage:
		./make-index.sh <temp folder>
	
	Result:
		- A word frequency count of the input corpus
		  resides in output/wordcount in HDFS
		- A stopwords.txt file resides in output/stopwords.txt
		- A full inverted index of the input corpus
		  resides in output/index in HDFS 
		
	Requirements:
		- Give it a temporary folder which it will use to build the stopwords file.
		- The corpus to be indexed must be in the input directory of the DFS.
		- The FullInvertedIndex.jar must be in the current working directory.

Querying the index
	Usage:
		./search "query"
		
	Result:
		List of each line containing query value printed on STDOUT
		
	Requirements:
		- The index must be in output/index as generated by make-index.sh
		- The query must be valid (see further down)	
		
Stopwords:

	Stopwords are words that occur extremely frequently in the text.
	These words are filtered out - the are considered to NOT be a part
	of the text. Thus searching for them will not return a result.

	
Valid Queries:
	
	Queries consist of a list of keywords separated by one of the modifiers in the set {AND,OR,NOT}.
	The generic regex format of the query is: (((NOT)*(keyword))(AND/OR))*.
	1. Query cannot start with AND/OR.
	2. Query cannot end with AND/OR/NOT.
	3. Query cannot contain AND/OR/NOT followed by AND/OR.
	4. Query cannot contain keyword followed by another keyword or NOT.
	
	 
	 